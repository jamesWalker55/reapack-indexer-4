use leon::{Template, Values};
use once_cell::sync::Lazy;

const REPOSITORY_STR: &str = include_str!("repository.ini");
const PACKAGE_STR: &str = include_str!("package.ini");
const VERSION_STR: &str = include_str!("version.ini");

static REPOSITORY_TEMPLATE: Lazy<Template> = Lazy::new(|| Template::parse(REPOSITORY_STR).unwrap());
static PACKAGE_TEMPLATE: Lazy<Template> = Lazy::new(|| Template::parse(PACKAGE_STR).unwrap());
static VERSION_TEMPLATE: Lazy<Template> = Lazy::new(|| Template::parse(VERSION_STR).unwrap());

// Generated by ChatGPT:
macro_rules! template_params {
    ($struct_name:ident, $( $field:ident: $field_type:ty = $default_val:expr ),*) => {
        pub(crate) struct $struct_name<'a> {
            $( $field: $field_type, )*
        }

        impl<'a> Values for $struct_name<'a> {
            fn get_value(&self, key: &str) -> Option<std::borrow::Cow<'_, str>> {
                match key {
                    $( stringify!($field) => Some(self.$field.into()), )*
                    _ => None,
                }
            }
        }

        impl<'a> $struct_name<'a> {
            $(
                pub(crate) fn $field(mut self, val: &'a str) -> Self {
                    self.$field = val;
                    self
                }
            )*
        }

        impl<'a> Default for $struct_name<'a> {
            fn default() -> Self {
                Self {
                    $( $field: $default_val.into(), )*
                }
            }
        }
    };
}

template_params!(
    RepositoryTemplateParams,
    author: &'a str = "Your Name",
    url_pattern: &'a str = "https://raw.githubusercontent.com/YOUR_USERNAME/YOUR_REPOSITORY/{git_commit}/{relpath}",
    identifier: &'a str = "my-cool-repository"
);

pub(crate) fn generate_repository_config(params: &RepositoryTemplateParams) -> String {
    REPOSITORY_TEMPLATE.render(&params).unwrap()
}

template_params!(
    PackageTemplateParams,
    name: &'a str = "My cool package",
    category: &'a str = "Category",
    r#type: &'a str = "script",
    identifier: &'a str = "my-cool-package",
    author: &'a str = "Your Name"
);

pub(crate) fn generate_package_config(params: &PackageTemplateParams) -> String {
    PACKAGE_TEMPLATE.render(&params).unwrap()
}

template_params!(
    VersionTemplateParams,
    time: &'a str = "1996-12-19T16:39:57-08:00"
);

pub(crate) fn generate_version_config(params: &VersionTemplateParams) -> String {
    VERSION_TEMPLATE.render(&params).unwrap()
}
